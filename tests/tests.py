#!/usr/bin/python3

import requests
import json

testdata = { "type": "Feature", "properties": { "name": "Dunno", "country": "Dunno", "ISO3166-1-Alpha-3": "USA", "state_code": "ID", "id": "USA-3518" }, "geometry": { "type": "Polygon", "coordinates": "[ [ [ -111.04972774945814, 44.488163357107609 ], [ -111.05024451378105, 42.001596788087241 ], [ -114.03422258182684, 41.993121853191369 ], [ -117.0282517159534, 42.000020656902336 ], [ -117.0139631824247, 43.797068589852231 ], [ -116.92665585006759, 44.0812114528091 ], [ -117.00760698125281, 44.211410223968471 ], [ -117.19439144577179, 44.279132188486983 ], [ -117.19229855026396, 44.438941555349601 ], [ -117.0515319487009, 44.665956122407792 ], [ -116.83614457890837, 44.863851019869529 ], [ -116.69328508183749, 45.186647854180706 ], [ -116.55887468144633, 45.444358222020284 ], [ -116.45779557988342, 45.574531154963509 ], [ -116.51125484908937, 45.726408189469325 ], [ -116.67899654830879, 45.807359320654555 ], [ -116.91500281458576, 45.999983222022507 ], [ -116.9065278796899, 46.177775987322704 ], [ -116.99807267949495, 46.33016978615143 ], [ -117.02664974655237, 47.722927151065861 ], [ -117.03142981653936, 48.999309190458987 ], [ -116.04823401575418, 49.000368557320968 ], [ -115.96779964889187, 47.950484320663122 ], [ -115.70427568241946, 47.684841620466742 ], [ -115.70479244674239, 47.504930121442584 ], [ -115.51906734908539, 47.345120754579966 ], [ -115.28833207890217, 47.250397854188975 ], [ -115.12164974654473, 47.09536855731335 ], [ -114.8433204822207, 46.786317653991802 ], [ -114.58561011438114, 46.641339423196953 ], [ -114.28451738163254, 46.631805121439101 ], [ -114.39404557987515, 46.410087388690812 ], [ -114.49142981652921, 46.147080186541331 ], [ -114.40727474654187, 45.889912421240822 ], [ -114.52370174849547, 45.825368557308266 ], [ -114.51365068241471, 45.569234320653592 ], [ -114.33531531457545, 45.470273952814665 ], [ -114.13793718143664, 45.589336452815132 ], [ -114.03579871301176, 45.730103054378205 ], [ -113.91410071496439, 45.702585354182773 ], [ -113.79449561242484, 45.56499685320567 ], [ -113.68021318241136, 45.249072984389301 ], [ -113.50293718143411, 45.124222723972125 ], [ -113.43942684614738, 44.862791653007548 ], [ -113.37857784712371, 44.78977285417912 ], [ -113.174843512813, 44.765433254569658 ], [ -113.05208614790365, 44.619912421235739 ], [ -112.87481014692638, 44.360083319672199 ], [ -112.69014441613137, 44.498731187511297 ], [ -112.36259335004932, 44.462221788097082 ], [ -112.33613501671589, 44.560639553396953 ], [ -111.77149247927873, 44.498214423188372 ], [ -111.54238501671271, 44.53048635515465 ], [ -111.40001644574861, 44.728923855155443 ], [ -111.29154761436796, 44.701406154960026 ], [ -111.19418921593007, 44.561156317719878 ], [ -111.08517778201036, 44.506146755545174 ], [ -111.04972774945814, 44.488163357107609 ] ] ]" } }
updateddata = { "type": "Feature", "properties": { "name": "Idaho", "country": "United States of America", "ISO3166-1-Alpha-3": "USA", "state_code": "ID", "id": "USA-3518" }, "geometry": { "type": "Polygon", "coordinates": "[ [ [ -111.04972774945814, 44.488163357107609 ], [ -111.05024451378105, 42.001596788087241 ], [ -114.03422258182684, 41.993121853191369 ], [ -117.0282517159534, 42.000020656902336 ], [ -117.0139631824247, 43.797068589852231 ], [ -116.92665585006759, 44.0812114528091 ], [ -117.00760698125281, 44.211410223968471 ], [ -117.19439144577179, 44.279132188486983 ], [ -117.19229855026396, 44.438941555349601 ], [ -117.0515319487009, 44.665956122407792 ], [ -116.83614457890837, 44.863851019869529 ], [ -116.69328508183749, 45.186647854180706 ], [ -116.55887468144633, 45.444358222020284 ], [ -116.45779557988342, 45.574531154963509 ], [ -116.51125484908937, 45.726408189469325 ], [ -116.67899654830879, 45.807359320654555 ], [ -116.91500281458576, 45.999983222022507 ], [ -116.9065278796899, 46.177775987322704 ], [ -116.99807267949495, 46.33016978615143 ], [ -117.02664974655237, 47.722927151065861 ], [ -117.03142981653936, 48.999309190458987 ], [ -116.04823401575418, 49.000368557320968 ], [ -115.96779964889187, 47.950484320663122 ], [ -115.70427568241946, 47.684841620466742 ], [ -115.70479244674239, 47.504930121442584 ], [ -115.51906734908539, 47.345120754579966 ], [ -115.28833207890217, 47.250397854188975 ], [ -115.12164974654473, 47.09536855731335 ], [ -114.8433204822207, 46.786317653991802 ], [ -114.58561011438114, 46.641339423196953 ], [ -114.28451738163254, 46.631805121439101 ], [ -114.39404557987515, 46.410087388690812 ], [ -114.49142981652921, 46.147080186541331 ], [ -114.40727474654187, 45.889912421240822 ], [ -114.52370174849547, 45.825368557308266 ], [ -114.51365068241471, 45.569234320653592 ], [ -114.33531531457545, 45.470273952814665 ], [ -114.13793718143664, 45.589336452815132 ], [ -114.03579871301176, 45.730103054378205 ], [ -113.91410071496439, 45.702585354182773 ], [ -113.79449561242484, 45.56499685320567 ], [ -113.68021318241136, 45.249072984389301 ], [ -113.50293718143411, 45.124222723972125 ], [ -113.43942684614738, 44.862791653007548 ], [ -113.37857784712371, 44.78977285417912 ], [ -113.174843512813, 44.765433254569658 ], [ -113.05208614790365, 44.619912421235739 ], [ -112.87481014692638, 44.360083319672199 ], [ -112.69014441613137, 44.498731187511297 ], [ -112.36259335004932, 44.462221788097082 ], [ -112.33613501671589, 44.560639553396953 ], [ -111.77149247927873, 44.498214423188372 ], [ -111.54238501671271, 44.53048635515465 ], [ -111.40001644574861, 44.728923855155443 ], [ -111.29154761436796, 44.701406154960026 ], [ -111.19418921593007, 44.561156317719878 ], [ -111.08517778201036, 44.506146755545174 ], [ -111.04972774945814, 44.488163357107609 ] ] ]" } }


print("Geosnips_API tester : ")
def test_create():
    print("Testing Create : ")
    print("Posting endpoint /api/create with testdata : ")
    url = "http://localhost:8000/api/create"
    retData=requests.post(url, json=testdata)
    if retData.status_code == 201:
        print("Create OK")
    else:
        print("Create failed")
def test_read():
    print("Testing Read : ")
    print("Getting endpoint /api/read ")
    url = "http://localhost:8000/api/read"
    retData=requests.get(url)
    if retData.status_code == 200:
        print("Read OK")
    else:  
        print("Read failed")
def test_update():
    print("Testing Update : ")
    print("Posting endpoint /api/update with updatedtestdata : with primary key id the same as the one to be deleted: ")
    url = "http://localhost:8000/api/update"
    retData=requests.post(url, json=testdata)
    if retData.status_code == 200:
        print("Update OK")
    else:
        print("Update failed")
def test_delete():
    print("Testing Delete : ")
    print("Posting endpoint /api/delete with updatedtestdata with primary key id the same as the one to be deleted: ")
    url = "http://localhost:8000/api/delete"
    retData=requests.delete(url, json=updateddata)
    if retData.status_code == 204:
        print("Delete OK")
    else :
        print("Delete failed")
if __name__ == "__main__":
    test_create()
    test_read()
    test_update()
    test_delete()
